<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<!--
 *  Copyright (c) 2004 Christopher Ottley.
 *
 *  This file is part of MAF.
 *
 *  MAF is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  MAF is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with MAF; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->
<!DOCTYPE window SYSTEM "chrome://maf/locale/maf.dtd">

<window id="saveselectedtabsdlg"
         title="&maf.saveSelectedTabsDialog.title;"
         orient="horizontal"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         persist="width height screenX screenY"
         onload="onLoad()">

<script src="chrome://maf/content/maf.js"/>
<script><![CDATA[
 browserWindow = window.arguments[0];
 windowMAF = window.arguments[1];

 MafGUI.init(browserWindow);

  function onLoad() {
    window.sizeToContent();

    // TODO: Create in memory data source with browser tab data

    document.getElementById("open-tabs-tree").database.AddDataSource(
           getOpenTabsDatasource().QueryInterface(Components.interfaces.nsIRDFDataSource));
    document.getElementById("open-tabs-tree").builder.rebuild();

  }

  function getOpenTabsDatasource() {
    const MAFNamespace = "http://maf.mozdev.org/metadata/rdf#";

    var gRDFService = Components.classes["@mozilla.org/rdf/rdf-service;1"]
                         .getService(Components.interfaces.nsIRDFService);
    var gRDFCService = Components.classes["@mozilla.org/rdf/container-utils;1"]
                          .getService(Components.interfaces.nsIRDFContainerUtils);

    // Create an in memory RDF data source
    var datasource = Components.classes["@mozilla.org/rdf/datasource;1?name=in-memory-datasource"]
                       .createInstance(Components.interfaces.nsIRDFDataSource);

    var rootSubject = gRDFService.GetResource("http://maf.mozdev.org/metadata/rdf/open-tabs");
    var tabsSequence = gRDFCService.MakeSeq(datasource, rootSubject);

    var browsers = browserWindow.getBrowser().browsers;

    for (var i=0; i < browsers.length; i++) {

      var rootTabSubject = gRDFService.GetResource("http://maf.mozdev.org/metadata/rdf/open-tabs/" + i);

      // Add the title
      var predicate = gRDFService.GetResource(MAFNamespace + "title");
      var title = browsers[i].contentDocument.title;
      if (title == "") { title = "Unknown"; }
      var object = gRDFService.GetResource(title);
      datasource.Assert(rootTabSubject, predicate, object, true);

      // Add the original url
      predicate = gRDFService.GetResource(MAFNamespace + "originalurl");
      object = gRDFService.GetResource(browsers[i].contentDocument.location.href);
      datasource.Assert(rootTabSubject, predicate, object, true);

      tabsSequence.AppendElement(rootTabSubject);

    }

    return datasource;
  }

/**
 * Helper function that lets one see the source to in memory rdf data sources
 */
function serialize(originalDatasource){
  const rdfXMLSerializerContractID = "@mozilla.org/rdf/xml-serializer;1";
  const rdfXMLSerializerIID = Components.interfaces.nsIRDFXMLSerializer;
  const rdfXMLSourceIID = Components.interfaces.nsIRDFXMLSource;

  var ser = Components.classes[rdfXMLSerializerContractID].getService(rdfXMLSerializerIID);

  ser.QueryInterface(rdfXMLSourceIID);

  var outputstream = {
    content:"",
    write:function(s, count) {
      this.content+=s;
      return count;
    },
    flush:function(){},
    close:function(){}
  };

  ser.init(originalDatasource);
  ser.Serialize(outputstream);
  browserWindow.alert(outputstream.content);
};

  function saveSelectedTabsInArchive(urlsource) {
    try {
      var start = new Object();
      var end = new Object();
      var numRanges = document.getElementById("open-tabs-tree").view.selection.getRangeCount();

      var browserList = new Array();

      // Construct browser array with matching indexes
      mafdebug("Constructing browser array with matching indexes");

      for (var t=0; t < numRanges; t++) {
        document.getElementById("open-tabs-tree").view.selection.getRangeAt(t,start,end);
        for (var v=start.value; v <= end.value; v++) {
          browserList.push(v);
        }
      }

      // If there's something selected
      if (browserList.length > 0) {
        mafdebug("There is something selected");

        var defaultFileName = ""
        // MafUtils.validateFileName(browserWindow.getBrowser().selectedBrowser.contentDocument.title);

        var indexAndArchivePath = MafGUI.selectFileSaveArchive(defaultFileName);

        var index = -1;

        var archivePath = "";

        if (indexAndArchivePath != "") {
          index = parseInt(indexAndArchivePath.substring(0, indexAndArchivePath.indexOf(",")));
          archivePath = indexAndArchivePath.substring(indexAndArchivePath.indexOf(",") + 1, indexAndArchivePath.length);
        }

        if ((index != -1) && (archivePath != "")) {
          windowMAF.saveAllTabsComplete(browserWindow.getBrowser().browsers,
                                        browserList.toString(),
                                        MafPreferences.temp,
                                        MafPreferences.programFromSaveIndex(index), archivePath);
        }
      }

    } catch (e)  {
      alert(e);
    }
  }



]]></script>

<vbox flex="1">
  <tree id="open-tabs-tree" flex="1" rows="15" datasources="rdf:null"
         ref="http://maf.mozdev.org/metadata/rdf/open-tabs" flags="dont-build-content">
  <treecols>
    <treecol id="title" label="&maf.saveSelectedTabsDialog.tree.title;" primary="true" flex="1"
              persist="width ordinal hidden"/>
    <splitter class="tree-splitter"/>
    <treecol id="originalurl" label="&maf.saveSelectedTabsDialog.tree.originalurl;" flex="1"
              persist="width ordinal hidden"/>
  </treecols>

    <template>
      <rule>
        <treechildren flex="1">
          <treeitem uri="rdf:*">
            <treerow>
              <treecell label="rdf:http://maf.mozdev.org/metadata/rdf#title"/>
              <treecell label="rdf:http://maf.mozdev.org/metadata/rdf#originalurl"/>
            </treerow>
          </treeitem>
        </treechildren>
      </rule>
    </template>
  </tree>

  <hbox>
    <button id="maf-savetabs-orig-button" label="&maf.saveSelectedTabsDialog.btnsaveselected;"
             oncommand="saveSelectedTabsInArchive('originalurl');"/>
    <spacer flex="1"/>
    <button id="maf-savetabs-close-button" label="&maf.saveSelectedTabsDialog.btnclose;" oncommand="window.close();"/>
  </hbox>
</vbox>

</window>
